{"version":3,"file":"index-a22e6568.esm.js","sources":["../../src/api/onboardingApi.ts","../../src/components/OnboardingFlow/BusinessApplicationList.tsx","../../src/components/OnboardingFlow/BusinessApplicationDetails.tsx","../../src/components/OnboardingFlow/SystemSelection.tsx","../../src/components/OnboardingFlow/ComponentCreation.tsx","../../src/components/OnboardingFlow/ReviewAndSubmit.tsx","../../src/components/OnboardingFlow/OnboardingFlow.tsx"],"sourcesContent":["import { BusinessApplication, System } from '../types';\n\nconst BA_API_URL = 'https://raw.githubusercontent.com/rmadiraju/harness-onboarding-flow/refs/heads/main/ba.json';\nconst SYSTEM_API_URL = 'https://raw.githubusercontent.com/rmadiraju/harness-onboarding-flow/refs/heads/main/system.json';\n\nexport class OnboardingApi {\n  static async fetchBusinessApplications(): Promise<BusinessApplication[]> {\n    try {\n      const response = await fetch(BA_API_URL);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch business applications: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.businessApplications || [];\n    } catch (error) {\n      console.error('Error fetching business applications:', error);\n      // Return sample data for development\n      return [\n        {\n          id: 'ba-1',\n          name: 'E-commerce Platform',\n          description: 'Main e-commerce application for online retail',\n          email: 'ecommerce@company.com'\n        },\n        {\n          id: 'ba-2',\n          name: 'Payment Gateway',\n          description: 'Secure payment processing application',\n          email: 'payments@company.com'\n        },\n        {\n          id: 'ba-3',\n          name: 'Customer Portal',\n          description: 'Customer self-service portal application',\n          email: 'customer@company.com'\n        }\n      ];\n    }\n  }\n\n  static async fetchSystems(): Promise<System[]> {\n    try {\n      const response = await fetch(SYSTEM_API_URL);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch systems: ${response.statusText}`);\n      }\n      const data = await response.json();\n      // Handle both formats: direct array or wrapped in systems property\n      return Array.isArray(data) ? data : (data.systems || []);\n    } catch (error) {\n      console.error('Error fetching systems:', error);\n      // Return sample data for development\n      return [\n        {\n          id: 'sys-1',\n          name: 'E-commerce Platform',\n          description: 'Main e-commerce system for online retail operations with product catalog, shopping cart, and order management',\n          owner: 'E-commerce Team',\n          type: 'Web Application'\n        },\n        {\n          id: 'sys-2',\n          name: 'Payment Gateway',\n          description: 'Secure payment processing system supporting multiple payment methods including credit cards, digital wallets, and bank transfers',\n          owner: 'Payment Team',\n          type: 'API Service'\n        },\n        {\n          id: 'sys-3',\n          name: 'Customer Portal',\n          description: 'Customer self-service portal for account management, order tracking, and support ticket creation',\n          owner: 'Customer Success Team',\n          type: 'Web Application'\n        },\n        {\n          id: 'sys-4',\n          name: 'Inventory Management',\n          description: 'Real-time inventory tracking and management system with automated reorder notifications and supplier integration',\n          owner: 'Operations Team',\n          type: 'Backend Service'\n        },\n        {\n          id: 'sys-5',\n          name: 'Analytics Dashboard',\n          description: 'Business intelligence and analytics platform providing real-time insights and reporting capabilities',\n          owner: 'Data Team',\n          type: 'Dashboard'\n        },\n        {\n          id: 'sys-6',\n          name: 'Order Processing',\n          description: 'Order fulfillment and processing system handling order validation, payment confirmation, and shipping coordination',\n          owner: 'Operations Team',\n          type: 'Microservice'\n        },\n        {\n          id: 'sys-7',\n          name: 'User Authentication',\n          description: 'Centralized authentication and authorization system with multi-factor authentication and SSO support',\n          owner: 'Security Team',\n          type: 'API Service'\n        },\n        {\n          id: 'sys-8',\n          name: 'Notification Service',\n          description: 'Multi-channel notification system supporting email, SMS, push notifications, and in-app messaging',\n          owner: 'Platform Team',\n          type: 'Microservice'\n        },\n        {\n          id: 'sys-9',\n          name: 'Content Management',\n          description: 'Content management system for managing product descriptions, marketing content, and digital assets',\n          owner: 'Marketing Team',\n          type: 'Web Application'\n        },\n        {\n          id: 'sys-10',\n          name: 'Shipping Integration',\n          description: 'Shipping and logistics integration system connecting with multiple carriers and providing real-time tracking',\n          owner: 'Logistics Team',\n          type: 'API Service'\n        },\n        {\n          id: 'sys-11',\n          name: 'Recommendation Engine',\n          description: 'AI-powered recommendation system providing personalized product suggestions and content recommendations',\n          owner: 'Data Science Team',\n          type: 'Machine Learning Service'\n        },\n        {\n          id: 'sys-12',\n          name: 'Fraud Detection',\n          description: 'Real-time fraud detection system using machine learning to identify and prevent fraudulent transactions',\n          owner: 'Security Team',\n          type: 'AI Service'\n        },\n        {\n          id: 'sys-13',\n          name: 'Customer Support',\n          description: 'Customer support ticketing system with knowledge base, live chat, and escalation management',\n          owner: 'Support Team',\n          type: 'Web Application'\n        },\n        {\n          id: 'sys-14',\n          name: 'Reporting Engine',\n          description: 'Advanced reporting and data visualization system with customizable dashboards and automated report generation',\n          owner: 'Business Intelligence Team',\n          type: 'Dashboard'\n        },\n        {\n          id: 'sys-15',\n          name: 'API Gateway',\n          description: 'Centralized API gateway providing rate limiting, authentication, monitoring, and request routing',\n          owner: 'Platform Team',\n          type: 'API Gateway'\n        }\n      ];\n    }\n  }\n} ","import React, { useState, useEffect } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  Typography,\n  Box,\n  CircularProgress,\n  Alert,\n} from '@mui/material';\nimport { BusinessApplication } from '../../types';\nimport { OnboardingApi } from '../../api/onboardingApi';\n\ninterface BusinessApplicationListProps {\n  onSelectBA: (ba: BusinessApplication) => void;\n}\n\nexport const BusinessApplicationList: React.FC<BusinessApplicationListProps> = ({ onSelectBA }) => {\n  const [businessApplications, setBusinessApplications] = useState<BusinessApplication[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchBAs = async () => {\n      try {\n        setLoading(true);\n        const data = await OnboardingApi.fetchBusinessApplications();\n        setBusinessApplications(data);\n      } catch (err) {\n        setError('Failed to fetch business applications');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBAs();\n  }, []);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Select a Business Application\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Choose a business application to begin the onboarding process\n      </Typography>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>Name</strong></TableCell>\n              <TableCell><strong>Description</strong></TableCell>\n              <TableCell align=\"center\"><strong>Action</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {businessApplications.map((ba) => (\n              <TableRow key={ba.id} hover>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ba.name}</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {ba.description}\n                  </Typography>\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onSelectBA(ba)}\n                    size=\"small\"\n                  >\n                    Onboard\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {businessApplications.length === 0 && (\n        <Box textAlign=\"center\" py={4}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No business applications found\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n}; ","import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  Button,\n  FormControlLabel,\n  Checkbox,\n  Divider,\n  Grid,\n} from '@mui/material';\nimport { BusinessApplication } from '../../types';\n\ninterface BusinessApplicationDetailsProps {\n  businessApplication: BusinessApplication;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport const BusinessApplicationDetails: React.FC<BusinessApplicationDetailsProps> = ({\n  businessApplication,\n  onNext,\n  onBack,\n}) => {\n  const [createSystem, setCreateSystem] = useState(false);\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Business Application Details\n      </Typography>\n      \n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                Name\n              </Typography>\n              <Typography variant=\"h6\" gutterBottom>\n                {businessApplication.name}\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                Email\n              </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n                {businessApplication.email}\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                Description\n              </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n                {businessApplication.description}\n              </Typography>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      <Divider sx={{ my: 3 }} />\n\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          System Configuration\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          Choose whether to create a new system or select an existing one\n        </Typography>\n        \n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={createSystem}\n              onChange={(e) => setCreateSystem(e.target.checked)}\n              color=\"primary\"\n            />\n          }\n          label=\"Create a new system for this onboarding\"\n        />\n      </Box>\n\n      <Box display=\"flex\" justifyContent=\"space-between\" sx={{ mt: 4 }}>\n        <Button variant=\"outlined\" onClick={onBack}>\n          Back\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onNext}\n          disabled={!createSystem}\n        >\n          {createSystem ? 'Continue to System Selection' : 'Select System Option'}\n        </Button>\n      </Box>\n    </Box>\n  );\n}; ","import React, { useState, useEffect } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  Typography,\n  Box,\n  CircularProgress,\n  Alert,\n  Chip,\n} from '@mui/material';\nimport { System } from '../../types';\nimport { OnboardingApi } from '../../api/onboardingApi';\n\ninterface SystemSelectionProps {\n  onSelectSystem: (system: System) => void;\n  onBack: () => void;\n}\n\nexport const SystemSelection: React.FC<SystemSelectionProps> = ({\n  onSelectSystem,\n  onBack,\n}) => {\n  const [systems, setSystems] = useState<System[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchSystems = async () => {\n      try {\n        setLoading(true);\n        const data = await OnboardingApi.fetchSystems();\n        setSystems(data);\n      } catch (err) {\n        setError('Failed to fetch systems');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSystems();\n  }, []);\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        System Selection\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Select a system for your onboarding process\n      </Typography>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>Name</strong></TableCell>\n              <TableCell><strong>Description</strong></TableCell>\n              <TableCell><strong>Owner</strong></TableCell>\n              <TableCell><strong>Type</strong></TableCell>\n              <TableCell align=\"center\"><strong>Action</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {systems.map((system) => (\n              <TableRow key={system.id} hover>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{system.name}</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {system.description}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"body2\">{system.owner}</Typography>\n                </TableCell>\n                <TableCell>\n                  <Chip label={system.type} size=\"small\" color=\"primary\" variant=\"outlined\" />\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onSelectSystem(system)}\n                    size=\"small\"\n                  >\n                    Select\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {systems.length === 0 && (\n        <Box textAlign=\"center\" py={4}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No systems found\n          </Typography>\n        </Box>\n      )}\n\n      <Box display=\"flex\" justifyContent=\"space-between\" sx={{ mt: 4 }}>\n        <Button variant=\"outlined\" onClick={onBack}>\n          Back\n        </Button>\n      </Box>\n    </Box>\n  );\n}; ","import React, { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  FormHelperText,\n} from '@mui/material';\nimport { Component } from '../../types';\n\ninterface ComponentCreationProps {\n  onComponentCreated: (component: Component) => void;\n  onBack: () => void;\n}\n\ninterface ValidationErrors {\n  name?: string;\n  type?: string;\n  language?: string;\n}\n\nexport const ComponentCreation: React.FC<ComponentCreationProps> = ({\n  onComponentCreated,\n  onBack,\n}) => {\n  const [component, setComponent] = useState<Component>({\n    name: '',\n    type: 'microservice',\n    language: 'java',\n  });\n\n  const [errors, setErrors] = useState<ValidationErrors>({});\n\n  const validateForm = (): boolean => {\n    const newErrors: ValidationErrors = {};\n\n    if (!component.name.trim()) {\n      newErrors.name = 'Component name is required';\n    }\n\n    if (!component.type) {\n      newErrors.type = 'Component type is required';\n    }\n\n    if (!component.language) {\n      newErrors.language = 'Language is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = () => {\n    if (validateForm()) {\n      onComponentCreated(component);\n    }\n  };\n\n  const handleInputChange = (field: keyof Component, value: string) => {\n    setComponent(prev => ({ ...prev, [field]: value }));\n    if (errors[field as keyof ValidationErrors]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Component Creation\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Create a new component for your system\n      </Typography>\n\n      <Card>\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Component Name\"\n                value={component.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                error={!!errors.name}\n                helperText={errors.name}\n                placeholder=\"Enter component name\"\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth error={!!errors.type}>\n                <InputLabel>Component Type</InputLabel>\n                <Select\n                  value={component.type}\n                  label=\"Component Type\"\n                  onChange={(e) => handleInputChange('type', e.target.value)}\n                >\n                  <MenuItem value=\"microservice\">Microservice</MenuItem>\n                  <MenuItem value=\"stream\">Stream</MenuItem>\n                  <MenuItem value=\"ui\">UI</MenuItem>\n                </Select>\n                {errors.type && <FormHelperText>{errors.type}</FormHelperText>}\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth error={!!errors.language}>\n                <InputLabel>Language</InputLabel>\n                <Select\n                  value={component.language}\n                  label=\"Language\"\n                  onChange={(e) => handleInputChange('language', e.target.value)}\n                >\n                  <MenuItem value=\"java\">Java</MenuItem>\n                  <MenuItem value=\"go\">Go</MenuItem>\n                  <MenuItem value=\"js\">JavaScript</MenuItem>\n                </Select>\n                {errors.language && <FormHelperText>{errors.language}</FormHelperText>}\n              </FormControl>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      <Box display=\"flex\" justifyContent=\"space-between\" sx={{ mt: 4 }}>\n        <Button variant=\"outlined\" onClick={onBack}>\n          Back\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmit}\n          disabled={!component.name.trim()}\n        >\n          Review Component\n        </Button>\n      </Box>\n    </Box>\n  );\n}; ","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Grid,\n  Divider,\n  Chip,\n  Alert,\n} from '@mui/material';\nimport { OnboardingData } from '../../types';\n\ninterface ReviewAndSubmitProps {\n  onboardingData: OnboardingData;\n  onBack: () => void;\n  onSubmit: () => void;\n}\n\nexport const ReviewAndSubmit: React.FC<ReviewAndSubmitProps> = ({\n  onboardingData,\n  onBack,\n  onSubmit,\n}) => {\n  const { selectedBA, selectedSystem, component } = onboardingData;\n\n  const isComplete = selectedBA && selectedSystem && component;\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Review & Submit\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Review all the information before submitting your onboarding request\n      </Typography>\n\n      {!isComplete && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          Please complete all previous steps before submitting\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Business Application Section */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Business Application\n              </Typography>\n              {selectedBA ? (\n                <Box>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    {selectedBA.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    {selectedBA.description}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    <strong>Email:</strong> {selectedBA.email}\n                  </Typography>\n                </Box>\n              ) : (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No business application selected\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* System Section */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                System\n              </Typography>\n              {selectedSystem ? (\n                <Box>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    {selectedSystem.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    {selectedSystem.description}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Owner:</strong> {selectedSystem.owner}\n                  </Typography>\n                  <Chip label={selectedSystem.type} size=\"small\" color=\"primary\" />\n                </Box>\n              ) : (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No system selected\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Component Section */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Component\n              </Typography>\n              {component ? (\n                <Grid container spacing={2}>\n                  <Grid item xs={12} md={4}>\n                    <Typography variant=\"body2\" gutterBottom>\n                      <strong>Name:</strong>\n                    </Typography>\n                    <Typography variant=\"subtitle1\">\n                      {component.name}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <Typography variant=\"body2\" gutterBottom>\n                      <strong>Type:</strong>\n                    </Typography>\n                    <Chip label={component.type} size=\"small\" color=\"secondary\" />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <Typography variant=\"body2\" gutterBottom>\n                      <strong>Language:</strong>\n                    </Typography>\n                    <Chip label={component.language} size=\"small\" color=\"info\" />\n                  </Grid>\n                </Grid>\n              ) : (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No component created\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      <Divider sx={{ my: 4 }} />\n\n      <Box display=\"flex\" justifyContent=\"space-between\" sx={{ mt: 4 }}>\n        <Button variant=\"outlined\" onClick={onBack}>\n          Back\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onSubmit}\n          disabled={!isComplete}\n        >\n          Submit Onboarding Request\n        </Button>\n      </Box>\n    </Box>\n  );\n}; ","import React, { useState } from 'react';\nimport {\n  Box,\n  Stepper,\n  Step,\n  StepLabel,\n  Paper,\n  Typography,\n  Container,\n} from '@mui/material';\nimport { OnboardingData } from '../../types';\nimport { BusinessApplicationList } from './BusinessApplicationList';\nimport { BusinessApplicationDetails } from './BusinessApplicationDetails';\nimport { SystemSelection } from './SystemSelection';\nimport { ComponentCreation } from './ComponentCreation';\nimport { ReviewAndSubmit } from './ReviewAndSubmit';\n\n// const steps: OnboardingStep[] = [\n//   {\n//     id: 'ba-list',\n//     title: 'Select Business Application',\n//     description: 'Choose a business application from the list',\n//     completed: false,\n//   },\n//   {\n//     id: 'ba-details',\n//     title: 'Business Application Details',\n//     description: 'Review BA details and create system',\n//     completed: false,\n//   },\n//   {\n//     id: 'system-selection',\n//     title: 'System Selection',\n//     description: 'Select or create a system',\n//     completed: false,\n//   },\n//   {\n//     id: 'component-creation',\n//     title: 'Component Creation',\n//     description: 'Create a new component',\n//     completed: false,\n//   },\n//   {\n//     id: 'review',\n//     title: 'Review & Submit',\n//     description: 'Review all information and submit',\n//     completed: false,\n//   },\n// ];\n\nconst stepLabels = [\n  'Business Application Info',\n  'System Details',\n  'Component Details',\n  'DB & S3',\n  'Summary',\n];\n\nexport const OnboardingFlow = () => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [onboardingData, setOnboardingData] = useState<OnboardingData>({});\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\n\n  const handleNext = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setCompletedSteps(prev => new Set([...prev, activeStep]));\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStepClick = (stepIndex: number) => {\n    if (completedSteps.has(stepIndex) || stepIndex <= activeStep) {\n      setActiveStep(stepIndex);\n    }\n  };\n\n  const updateOnboardingData = (data: Partial<OnboardingData>) => {\n    setOnboardingData(prev => ({ ...prev, ...data }));\n  };\n\n  const renderStepContent = (stepIndex: number) => {\n    switch (stepIndex) {\n      case 0:\n        return (\n          <BusinessApplicationList\n            onSelectBA={(ba: any) => {\n              updateOnboardingData({ selectedBA: ba });\n              handleNext();\n            }}\n          />\n        );\n      case 1:\n        return (\n          <BusinessApplicationDetails\n            businessApplication={onboardingData.selectedBA!}\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        );\n      case 2:\n        return (\n          <SystemSelection\n            onSelectSystem={(system: any) => {\n              updateOnboardingData({ selectedSystem: system });\n              handleNext();\n            }}\n            onBack={handleBack}\n          />\n        );\n      case 3:\n        return (\n          <ComponentCreation\n            onComponentCreated={(component: any) => {\n              updateOnboardingData({ component });\n              handleNext();\n            }}\n            onBack={handleBack}\n          />\n        );\n      case 4:\n        return (\n          <ReviewAndSubmit\n            onboardingData={onboardingData}\n            onBack={handleBack}\n            onSubmit={() => {\n              console.log('Onboarding submitted:', onboardingData);\n              // Handle submission logic here\n            }}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Onboard Business Application\n        </Typography>\n      </Box>\n      <Paper sx={{ p: 3 }}>\n        <Stepper activeStep={activeStep} alternativeLabel>\n          {stepLabels.map((label, index) => (\n            <Step key={label}>\n              <StepLabel\n                onClick={() => handleStepClick(index)}\n                sx={{ cursor: 'pointer' }}\n              >\n                {label}\n              </StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        <Box sx={{ mt: 6 }}>\n          {renderStepContent(activeStep)}\n        </Box>\n      </Paper>\n    </Container>\n  );\n}; "],"names":[],"mappings":"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"}